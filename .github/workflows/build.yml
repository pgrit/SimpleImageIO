name: Build

on: [push]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cmake -E make_directory ${{github.workspace}}/Runtimes

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=Release

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Release

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '6.0.x'

    - name: Test
      working-directory: ${{github.workspace}}
      run: |
        dotnet test

    - name: Upload Binaries
      uses: actions/upload-artifact@v2
      with:
        path: ${{github.workspace}}/Runtimes/*

  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cmake -E make_directory ${{github.workspace}}/Runtimes

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=Release

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Release

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '6.0.x'

    # fixes sporadic build fails on Windows (https://github.com/actions/setup-dotnet/issues/155)
    - name: Clean
      run: dotnet clean -c Release && dotnet nuget locals all --clear

    - name: Test
      working-directory: ${{github.workspace}}
      run: |
        dotnet test

    - name: Upload Binaries
      uses: actions/upload-artifact@v2
      with:
        path: ${{github.workspace}}/Runtimes/*

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cmake -E make_directory ${{github.workspace}}/Runtimes

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Release

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '6.0.x'

    # Since OpenImageDenoise links TBB, which will be in the same folder, we need
    # @loader_path in the rpath of the .dylib
    - name: Hack rpath
      working-directory: ${{github.workspace}}/External/OpenImageDenoise
      run: |
        install_name_tool -add_rpath @loader_path/ libOpenImageDenoise.1.dylib
        cp libOpenImageDenoise.1.dylib ../../Runtimes/

    - name: Test
      working-directory: ${{github.workspace}}
      run: |
        dotnet test

    - name: Upload Binaries
      uses: actions/upload-artifact@v2
      with:
        path: ${{github.workspace}}/Runtimes/*

  pack:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: ${{github.workspace}}/Runtimes

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '6.0.x'

    - name: Replace Mac OS binary
      run: cp ${{github.workspace}}/Runtimes/libOpenImageDenoise.1.dylib ${{github.workspace}}/External/OpenImageDenoise

    - name: Pack
      run: dotnet pack -c Release

    - name: Upload .nupkg
      uses: actions/upload-artifact@v2
      with:
        path: ${{github.workspace}}/SimpleImageIO/bin/**/*.nupkg

    - name: Publish on version change
      uses: alirezanet/publish-nuget@v3.0.4
      with:
        PROJECT_FILE_PATH: SimpleImageIO/SimpleImageIO.csproj
        NUGET_KEY: ${{secrets.NUGET_API_KEY}}

  testpython:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Fetch Python build dependencies
        run: python -m pip install --user wheel

      - name: Build and install
        run: python setup.py install

      - name: Run tests
        working-directory: ${{github.workspace}}/PyTest
        run: python -m unittest

  pypi:
    runs-on: ubuntu-latest
    needs: [testpython]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Fetch Python build dependencies
        run: python -m pip install --user wheel

      - name: Build Python Wheel
        run: python setup.py sdist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
