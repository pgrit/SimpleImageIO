#!csharp

using SimpleImageIO;
HTML(FlipBook.Header).Display();
Microsoft.DotNet.Interactive.Formatting.Formatter.Register<FlipBook>((flip, writer) => writer.Write(flip.ToString()), "text/html");

void AttachFormatters(Type type)
{
    Microsoft.DotNet.Interactive.Formatting.Formatter.Register(type, (imgObj, writer) => {
        var img = imgObj as SimpleImageIO.Image;
        string desc = img.ToString() + $", {img.Width}x{img.Height}, {img.NumChannels} channels (Memory Address: {img.DataPointer})<br>";
        writer.Write(desc + FlipBook.New.Add("image", img).ToString());
    }, "text/html");

    Type keyValType = typeof(KeyValuePair<,>).MakeGenericType([typeof(string), type]);
    Type valTupleType = typeof(System.ValueTuple<,>).MakeGenericType([typeof(string), type]);
    Type refTupleType = typeof(System.Tuple<,>).MakeGenericType([typeof(string), type]);

    foreach (var t in new[] { keyValType, valTupleType, refTupleType, type })
    {
        var enumType = typeof(IEnumerable<>).MakeGenericType([t]);
        Microsoft.DotNet.Interactive.Formatting.Formatter.Register(enumType, (imgs, writer) => {
            FlipBook flip = new();
            dynamic magic = imgs;
            int idx = 0;
            foreach (var i in magic) {
                if (i.GetType() == type)
                    flip.Add($"{idx++}", i);
                else if (i.GetType().GetGenericTypeDefinition() == typeof(System.ValueTuple<,>))
                    flip.Add(i.Item1, i.Item2);
                else if (i.GetType().GetGenericTypeDefinition() == typeof(KeyValuePair<,>))
                    flip.Add(i.Key, i.Value);
                else if (i.GetType().GetGenericTypeDefinition() == typeof(System.Tuple<,>))
                    flip.Add(i.Item1, i.Item2);
            }
            writer.Write(flip.ToString());
        }, "text/html");
    }
}

foreach (var a in System.AppDomain.CurrentDomain.GetAssemblies())
{
    var t = a.GetTypes().Where(t => t.IsAssignableTo(typeof(SimpleImageIO.Image)));
    foreach (var type in t)
        AttachFormatters(type);
}

Microsoft.DotNet.Interactive.Formatting.Formatter.Register<System.Runtime.CompilerServices.ITuple>((imgs, context) => {
    for (int i = 0; i < imgs.Length; ++i)
    {
        if (!(imgs[i] is SimpleImageIO.Image))
            return false;
    }

    FlipBook flip = new();
    int idx = 0;
    for (int i = 0; i < imgs.Length; ++i)
    {
        flip.Add($"{idx++}", imgs[i] as SimpleImageIO.Image);
    }
    context.Writer.Write(flip.ToString());
    return true;
}, "text/html");